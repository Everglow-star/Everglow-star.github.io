<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>英伦82年雪碧</title>
  <icon>https://www.gravatar.com/avatar/16a4bca9bcc485b1ded5dd60c0f09d60</icon>
  <subtitle>等苦尽甘来的那一天山河星月都做贺礼。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-14T15:01:59.608Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>英伦82年雪碧</name>
    <email>lihuitao_xd@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么表数据删掉一半，表文件大小不变？</title>
    <link href="http://example.com/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/"/>
    <id>http://example.com/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/</id>
    <published>2021-07-13T16:00:00.000Z</published>
    <updated>2021-07-14T15:01:59.608Z</updated>
    
    
    <summary type="html">&lt;p&gt;一个 InnoDB 表包含两部分，即：&lt;strong&gt;表结构定义和数据&lt;/strong&gt;。在 MySQL 8.0 版本以前，表结构是存在以.frm 为后缀的文件里。而 MySQL 8.0 版本，则已经允许把表结构定义放在系统数据表中了。因为表结构定义占用的空间很小，主要讨论表数据。&lt;/p&gt;
&lt;h2 id=&quot;参数-innodb-file-per-table&quot;&gt;&lt;a href=&quot;#参数-innodb-file-per-table&quot; class=&quot;headerlink&quot; title=&quot;参数 innodb_file_per_table&quot;&gt;&lt;/a&gt;参数 innodb_file_per_table&lt;/h2&gt;&lt;p&gt;表数据既可以存在共享表空间里，也可以是单独的文件。这个行为是由参数 innodb_file_per_table 控制的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个参数设置为 OFF 表示的是，表的数据放在系统共享表空间，也就是跟数据字典放在一起；&lt;/li&gt;
&lt;li&gt;这个参数设置为 ON 表示的是，每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议不论使用 MySQL 的哪个版本，都将这个值设置为 ON。&lt;strong&gt;因为，一个表单独存储为一个文件更容易管理，而且在你不需要这个表的时候，通过 drop table 命令，系统就会直接删除这个文件。而如果是放在共享表空间中，即使表删掉了，空间也是不会回收的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下讨论基于设置为ON的前提下。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL查询性能</title>
    <link href="http://example.com/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD/"/>
    <id>http://example.com/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD/</id>
    <published>2021-07-13T16:00:00.000Z</published>
    <updated>2021-07-14T15:02:39.450Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;为什么我只查一行的语句，也执行这么慢？&quot;&gt;&lt;a href=&quot;#为什么我只查一行的语句，也执行这么慢？&quot; class=&quot;headerlink&quot; title=&quot;为什么我只查一行的语句，也执行这么慢？&quot;&gt;&lt;/a&gt;为什么我只查一行的语句，也执行这么慢？&lt;/h1&gt;&lt;p&gt;构造表，这个表有两个字段 id 和 c，并且插入了 10 万行记录。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; CREATE TABLE `t` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `id` int(11) NOT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `c` int(11) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY KEY (`id`)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE=InnoDB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delimiter ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create procedure idata()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;begin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  declare i int;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set i=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  while(i&amp;lt;=100000) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    insert into t values(i,i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set i=i+1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end while;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delimiter ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call idata();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主备相关</title>
    <link href="http://example.com/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E4%B8%BB%E5%A4%87%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E4%B8%BB%E5%A4%87%E7%9B%B8%E5%85%B3/</id>
    <published>2021-07-13T16:00:00.000Z</published>
    <updated>2021-07-14T15:01:40.229Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;MySQL是怎么保证主备一致的？&quot;&gt;&lt;a href=&quot;#MySQL是怎么保证主备一致的？&quot; class=&quot;headerlink&quot; title=&quot;MySQL是怎么保证主备一致的？&quot;&gt;&lt;/a&gt;MySQL是怎么保证主备一致的？&lt;/h1&gt;&lt;h2 id=&quot;MySQL-主备的基本原理&quot;&gt;&lt;a href=&quot;#MySQL-主备的基本原理&quot; class=&quot;headerlink&quot; title=&quot;MySQL 主备的基本原理&quot;&gt;&lt;/a&gt;MySQL 主备的基本原理&lt;/h2&gt;&lt;p&gt;基本的主备切换流程：&lt;/p&gt;
&lt;img src=&quot;http://lihuitao-picture.oss-cn-beijing.aliyuncs.com/img/fd75a2b37ae6ca709b7f16fe060c2c10.png&quot; alt=&quot;img&quot; style=&quot;zoom: 50%;&quot; /&gt;

&lt;p&gt;在状态 1 中，客户端的读写都直接访问节点 A，而节点 B 是 A 的备库，只是将 A 的更新都同步过来，到本地执行。这样可以保持节点 B 和 A 的数据是相同的。当需要切换的时候，就切成状态 2。这时候客户端读写访问的都是节点 B，而节点 A 是 B 的备库。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>事务隔离：为什么你改了我还看不见？</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-13T14:41:34.776Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;事务隔离：为什么你改了我还看不见？&quot;&gt;&lt;a href=&quot;#事务隔离：为什么你改了我还看不见？&quot; class=&quot;headerlink&quot; title=&quot;事务隔离：为什么你改了我还看不见？&quot;&gt;&lt;/a&gt;事务隔离：为什么你改了我还看不见？&lt;/h1&gt;&lt;h2 id=&quot;隔离性与隔离级别&quot;&gt;&lt;a href=&quot;#隔离性与隔离级别&quot; class=&quot;headerlink&quot; title=&quot;隔离性与隔离级别&quot;&gt;&lt;/a&gt;隔离性与隔离级别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读未提交&lt;/strong&gt;是指，一个事务还没提交时，它做的变更就能被别的事务看到。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读提交&lt;/strong&gt;是指，一个事务提交之后，它做的变更才会被其他事务看到。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可重复读&lt;/strong&gt;是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;串行化&lt;/strong&gt;，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实现上，数据库里面会创建一个&lt;strong&gt;视图&lt;/strong&gt;，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，&lt;strong&gt;“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>基础架构：一条SQL语句查询过程</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-13T07:50:27.423Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;基础架构-一条SQL语句查询过程&quot;&gt;&lt;a href=&quot;#基础架构-一条SQL语句查询过程&quot; class=&quot;headerlink&quot; title=&quot;基础架构:一条SQL语句查询过程&quot;&gt;&lt;/a&gt;基础架构:一条&lt;code&gt;SQL&lt;/code&gt;语句查询过程&lt;/h1&gt;&lt;p&gt;&lt;code&gt;SQL&lt;/code&gt; 语句在 &lt;code&gt;MySQL&lt;/code&gt; 的各个功能模块中的执行过程。&lt;/p&gt;
&lt;img src=&quot;http://lihuitao-picture.oss-cn-beijing.aliyuncs.com/img/0d2070e8f84c4801adbfa03bda1f98d9.png&quot; alt=&quot;img&quot; style=&quot;zoom: 20%;&quot; /&gt;

&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt; 可以分为 Server 层和存储引擎层两部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server 层&lt;/strong&gt;包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 &lt;code&gt;MySQL&lt;/code&gt; 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储引擎层&lt;/strong&gt;负责数据的存储和提取。其架构模式是插件式的，支持 &lt;code&gt;InnoDB、MyISAM、Memory&lt;/code&gt; 等多个存储引擎。现在最常用的存储引擎是&lt;code&gt; InnoDB&lt;/code&gt;，它从 &lt;code&gt;MySQL&lt;/code&gt; 5.5.5 版本开始成为了默认存储引擎。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Redis为什么那么快？</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/RedisIO%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/RedisIO%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-13T02:16:32.653Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;高性能IO模型：为什么单线程Redis能那么快？&quot;&gt;&lt;a href=&quot;#高性能IO模型：为什么单线程Redis能那么快？&quot; class=&quot;headerlink&quot; title=&quot;高性能IO模型：为什么单线程Redis能那么快？&quot;&gt;&lt;/a&gt;高性能IO模型：为什么单线程Redis能那么快？&lt;/h1&gt;&lt;p&gt;Redis 是单线程，&lt;strong&gt;主要是指 Redis 的网络 IO 和键值对读写是由一个线程来完成&lt;/strong&gt;的，这也是 Redis 对外提供键值存储服务的主要流程。但 Redis 的其他功能，比如&lt;strong&gt;持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis切片集群</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-13T02:41:18.658Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;切片集群：数据增多了，是该加内存还是加实例？&quot;&gt;&lt;a href=&quot;#切片集群：数据增多了，是该加内存还是加实例？&quot; class=&quot;headerlink&quot; title=&quot;切片集群：数据增多了，是该加内存还是加实例？&quot;&gt;&lt;/a&gt;切片集群：数据增多了，是该加内存还是加实例？&lt;/h1&gt;&lt;p&gt;切片集群，也叫分片集群，就是指启动多个 Redis 实例组成一个集群，然后按照一定的规则，把收到的数据划分成多份，每一份用一个实例来保存。&lt;/p&gt;
&lt;img src=&quot;http://lihuitao-picture.oss-cn-beijing.aliyuncs.com/img/793251ca784yyf6ac37fe46389094b26.jpg&quot; alt=&quot;img&quot; style=&quot;zoom:20%;&quot; /&gt;

&lt;p&gt;好处：在切片集群中，实例在为 5GB 数据生成 RDB 时，数据量就小了很多，fork 子进程一般不会给主线程带来较长时间的阻塞。采用多个实例保存数据切片后，&lt;strong&gt;我们既能保存 25GB 数据，又避免了 fork 子进程阻塞主线程而导致的响应突然变慢。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据结构如何选择？</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E5%AE%9E%E6%88%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E5%AE%9E%E6%88%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-13T02:45:40.251Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;“万金油”的String，为什么不好用了？&quot;&gt;&lt;a href=&quot;#“万金油”的String，为什么不好用了？&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>日志系统：一条SQL更新语句执行过程</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-14T12:33:33.321Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;日志系统：一条SQL更新语句是如何执行的？&quot;&gt;&lt;a href=&quot;#日志系统：一条SQL更新语句是如何执行的？&quot; class=&quot;headerlink&quot; title=&quot;日志系统：一条SQL更新语句是如何执行的？&quot;&gt;&lt;/a&gt;日志系统：一条SQL更新语句是如何执行的？&lt;/h1&gt;&lt;p&gt;更新语句流程首先和查询语句流程是相似的。&lt;/p&gt;
&lt;img src=&quot;http://lihuitao-picture.oss-cn-beijing.aliyuncs.com/img/0d2070e8f84c4801adbfa03bda1f98d9.png&quot; alt=&quot;img&quot; style=&quot;zoom:20%;&quot; /&gt;

&lt;p&gt;与查询流程不一样的是，更新流程还涉及两个重要的日志模块，&lt;strong&gt;redo log（重做日志）和 binlog（归档日志）。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的锁</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E7%9A%84%E9%94%81/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E7%9A%84%E9%94%81/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-14T15:02:51.854Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;全局锁和表锁-：给表加个字段怎么有这么多阻碍？&quot;&gt;&lt;a href=&quot;#全局锁和表锁-：给表加个字段怎么有这么多阻碍？&quot; class=&quot;headerlink&quot; title=&quot;全局锁和表锁 ：给表加个字段怎么有这么多阻碍？&quot;&gt;&lt;/a&gt;全局锁和表锁 ：给表加个字段怎么有这么多阻碍？&lt;/h1&gt;&lt;p&gt;根据加锁的范围，MySQL 里面的锁大致可以分成&lt;strong&gt;全局锁、表级锁和行锁&lt;/strong&gt;三类。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出索引</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E7%B4%A2%E5%BC%95/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E7%B4%A2%E5%BC%95/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-14T02:15:10.111Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。&lt;/p&gt;
&lt;h1 id=&quot;索引基础&quot;&gt;&lt;a href=&quot;#索引基础&quot; class=&quot;headerlink&quot; title=&quot;索引基础&quot;&gt;&lt;/a&gt;索引基础&lt;/h1&gt;&lt;h2 id=&quot;索引的常见模型&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从集群及哨兵集群</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-13T06:48:41.856Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;数据同步：主从库如何实现数据一致？&quot;&gt;&lt;a href=&quot;#数据同步：主从库如何实现数据一致？&quot; class=&quot;headerlink&quot; title=&quot;数据同步：主从库如何实现数据一致？&quot;&gt;&lt;/a&gt;数据同步：主从库如何实现数据一致？&lt;/h1&gt;&lt;p&gt;Redis</summary>
        
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-07-12T12:15:36.681Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;h2 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h2&gt;&lt;img src=&quot;http://lihuitao-picture.oss-cn-beijing.aliyuncs.com/img/b7043bf29a253bb36221eaec62b2e129.jpg&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="algorithms" scheme="http://example.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%93%E9%A2%98/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-07-12T05:44:00.146Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;栈的结构&quot;&gt;&lt;a href=&quot;#栈的结构&quot; class=&quot;headerlink&quot; title=&quot;栈的结构&quot;&gt;&lt;/a&gt;栈的结构&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;后进者先出，先进者后出，这就是典型的“栈”结构。&lt;/strong&gt;栈是一种&lt;strong&gt;“操作受限”&lt;/strong&gt;的线性表，只允许在一端插入和删除数据。&lt;/p&gt;
&lt;img src=&quot;http://lihuitao-picture.oss-cn-beijing.aliyuncs.com/img/20210313172646.jpeg&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-07-12T05:41:49.342Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;链表（上）&quot;&gt;&lt;a href=&quot;#链表（上）&quot; class=&quot;headerlink&quot; title=&quot;链表（上）&quot;&gt;&lt;/a&gt;链表（上）&lt;/h1&gt;&lt;h2 id=&quot;链表结构&quot;&gt;&lt;a href=&quot;#链表结构&quot; class=&quot;headerlink&quot; title=&quot;链表结构&quot;&gt;&lt;/a&gt;链表结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组需要一块 &lt;strong&gt;连续&lt;/strong&gt; 的内存空间来存储，链表恰恰相反，它并 &lt;strong&gt;不需要一块连续&lt;/strong&gt; 的内存空间，它通过“指针”将一组零散的内存块串联起来使用。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基本架构</title>
    <link href="http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-07-12T14:33:31.671Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Redis主体&quot;&gt;&lt;a href=&quot;#Redis主体&quot; class=&quot;headerlink&quot; title=&quot;Redis主体&quot;&gt;&lt;/a&gt;&lt;code&gt;Redis&lt;/code&gt;主体&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Redis&lt;/code&gt;知识整体框架&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;http://lihuitao-picture.oss-cn-beijing.aliyuncs.com/img/79da7093ed998a99d9abe91e610b74e7.jpg&quot; alt=&quot;img&quot; style=&quot;zoom: 25%;&quot; /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高性能主线：&lt;/strong&gt; 包括线程模型、数据结构、持久化、网络框架；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可靠主线：&lt;/strong&gt;包括主从复制、哨兵机制；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可扩展主线：&lt;/strong&gt;包括数据分片、负载均衡。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据结构</title>
    <link href="http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-07-13T01:25:02.497Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;数据结构：快速的Redis有哪些慢操作？&quot;&gt;&lt;a href=&quot;#数据结构：快速的Redis有哪些慢操作？&quot; class=&quot;headerlink&quot; title=&quot;数据结构：快速的Redis有哪些慢操作？&quot;&gt;&lt;/a&gt;数据结构：快速的&lt;code&gt;Redis&lt;/code&gt;有哪些慢操作？&lt;/h1&gt;&lt;p&gt;底层数据结构一共有 6 种，分别是简单动态字符串、双向链表、压缩列表、哈希表、跳表和整数数组。&lt;/p&gt;
&lt;img src=&quot;http://lihuitao-picture.oss-cn-beijing.aliyuncs.com/img/8219f7yy651e566d47cc9f661b399f01.jpg&quot; alt=&quot;img&quot; style=&quot;zoom:20%;&quot; /&gt;

&lt;p&gt;可以看到，String 类型的底层实现只有一种数据结构，也就是简单动态字符串。而 List、Hash、Set 和 Sorted Set 这四种数据类型，都有两种底层实现结构。通常情况下，我们会把这四种类型称为集合类型， &lt;strong&gt;它们的特点是一个键对应了一个集合的数据。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这些数据结构都是值的底层实现，键和值本身之间用什么结构组织？&lt;/li&gt;
&lt;li&gt;为什么集合类型有那么多的底层结构，它们都是怎么组织数据的，都很快吗？&lt;/li&gt;
&lt;li&gt;什么是简单动态字符串，和常用的字符串是一回事吗？&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E4%B8%93%E9%A2%98/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-07-12T05:40:59.568Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;二分思想&quot;&gt;&lt;a href=&quot;#二分思想&quot; class=&quot;headerlink&quot; title=&quot;二分思想&quot;&gt;&lt;/a&gt;二分思想&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%A0%86%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%A0%86%E4%B8%93%E9%A2%98/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-07-12T05:39:48.412Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;如何理解“堆”？&quot;&gt;&lt;a href=&quot;#如何理解“堆”？&quot; class=&quot;headerlink&quot; title=&quot;如何理解“堆”？&quot;&gt;&lt;/a&gt;如何理解“堆”？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;堆是一个完全二叉树，除了最后一层，其他层的节点个数都是满的，最后一层的节点都靠左排列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;堆中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于每个节点的值都大于等于子树中每个节点值的堆，我们叫做“大顶堆”。对于每个节点的值都小于等于子树中每个节点值的堆，我们叫做“小顶堆”。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>散列表</title>
    <link href="http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%A3%E5%88%97%E8%A1%A8%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2021/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%A3%E5%88%97%E8%A1%A8%E4%B8%93%E9%A2%98/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-07-12T05:43:09.790Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;散列表&quot;&gt;&lt;a href=&quot;#散列表&quot; class=&quot;headerlink&quot; title=&quot;散列表&quot;&gt;&lt;/a&gt;散列表&lt;/h1&gt;&lt;h2 id=&quot;散列表（上）&quot;&gt;&lt;a href=&quot;#散列表（上）&quot; class=&quot;headerlink&quot; title=&quot;散列表（上）&quot;&gt;&lt;/a&gt;散列表（上）&lt;/h2&gt;&lt;h3 id=&quot;1-散列思想：&quot;&gt;&lt;a href=&quot;#1-散列思想：&quot; class=&quot;headerlink&quot; title=&quot;1.散列思想：&quot;&gt;&lt;/a&gt;1.散列思想：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;散列表(Hash Table)用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
